/*
 * helpers.js: Test helpers for winston
 *
 * (C) 2010 Charlie Robbins
 * MIT LICENSE
 *
 */

var ***REMOVED***ert = require('***REMOVED***ert'),
    fs = require('fs'),
    path = require('path'),
    spawn = require('child_process').spawn,
    util = require('util'),
    vows = require('vows'),
    winston = require('../lib/winston');    
    
var helpers = exports;

helpers.size = function (obj) {
  var size = 0, key;
  for (key in obj) {
    if (obj.hasOwnProperty(key)) {
      size++;
    }
  }
  
  return size;
};

helpers.tryUnlink = function (file) {
  try { fs.unlinkSync(file) }
  catch (ex) { }
};

helpers.***REMOVED***ertDateInfo = function (info) {
  ***REMOVED***ert.isNumber(Date.parse(info));
};

helpers.***REMOVED***ertProcessInfo = function (info) {
  ***REMOVED***ert.isNumber(info.pid);
  ***REMOVED***ert.isNumber(info.uid);
  ***REMOVED***ert.isNumber(info.gid);
  ***REMOVED***ert.isString(info.cwd);
  ***REMOVED***ert.isString(info.execPath);
  ***REMOVED***ert.isString(info.version);
  ***REMOVED***ert.isArray(info.argv);
  ***REMOVED***ert.isObject(info.memoryUsage);
};

helpers.***REMOVED***ertOsInfo = function (info) {
  ***REMOVED***ert.isArray(info.loadavg);
  ***REMOVED***ert.isNumber(info.uptime);
};

helpers.***REMOVED***ertTrace = function (trace) {
  trace.forEach(function (site) {
    ***REMOVED***ert.isTrue(!site.column || typeof site.column === 'number');
    ***REMOVED***ert.isTrue(!site.line || typeof site.line === 'number');
    ***REMOVED***ert.isTrue(!site.file || typeof site.file === 'string');
    ***REMOVED***ert.isTrue(!site.method || typeof site.method === 'string');
    ***REMOVED***ert.isTrue(!site.function || typeof site.function === 'string');
    ***REMOVED***ert.isTrue(typeof site.native === 'boolean');
  });
};

helpers.***REMOVED***ertLogger = function (logger, level) {
  ***REMOVED***ert.instanceOf(logger, winston.Logger);
  ***REMOVED***ert.isFunction(logger.log);
  ***REMOVED***ert.isFunction(logger.add);
  ***REMOVED***ert.isFunction(logger.remove);
  ***REMOVED***ert.equal(logger.level, level || "info");
  Object.keys(logger.levels).forEach(function (method) {
    ***REMOVED***ert.isFunction(logger[method]);
  });
};

helpers.***REMOVED***ertConsole = function (transport) {
  ***REMOVED***ert.instanceOf(transport, winston.transports.Console);
  ***REMOVED***ert.isFunction(transport.log);
};

helpers.***REMOVED***ertMemory = function (transport) {
  ***REMOVED***ert.instanceOf(transport, winston.transports.Memory);
  ***REMOVED***ert.isFunction(transport.log);
};

helpers.***REMOVED***ertFile = function (transport) {
  ***REMOVED***ert.instanceOf(transport, winston.transports.File);
  ***REMOVED***ert.isFunction(transport.log);
}

helpers.***REMOVED***ertDailyRotateFile = function (transport) {
  ***REMOVED***ert.instanceOf(transport, winston.transports.DailyRotateFile);
  ***REMOVED***ert.isFunction(transport.log);
}

helpers.***REMOVED***ertWebhook = function (transport) {
  ***REMOVED***ert.instanceOf(transport, winston.transports.Webhook);
  ***REMOVED***ert.isFunction(transport.log);
};

helpers.***REMOVED***ertCouchdb = function (transport) {
  ***REMOVED***ert.instanceOf(transport, winston.transports.Couchdb);
  ***REMOVED***ert.isFunction(transport.log);
};

helpers.***REMOVED***ertHandleExceptions = function (options) {
  return {
    topic: function () {
      var that = this,
          child = spawn('node', [options.script]);

      helpers.tryUnlink(options.logfile);
      child.on('exit', function () {
        fs.readFile(options.logfile, that.callback);
      });
    },
    "should save the error information to the specified file": function (err, data) {
      ***REMOVED***ert.isTrue(!err);
      data = JSON.parse(data);

      ***REMOVED***ert.isObject(data);
      helpers.***REMOVED***ertProcessInfo(data.process);
      helpers.***REMOVED***ertOsInfo(data.os);
      helpers.***REMOVED***ertTrace(data.trace);
    }
  }
}

helpers.testNpmLevels = function (transport, ***REMOVED***ertMsg, ***REMOVED***ertFn) {
  return helpers.testLevels(winston.config.npm.levels, transport, ***REMOVED***ertMsg, ***REMOVED***ertFn);
};

helpers.testSyslogLevels = function (transport, ***REMOVED***ertMsg, ***REMOVED***ertFn) {
  return helpers.testLevels(winston.config.syslog.levels, transport, ***REMOVED***ertMsg, ***REMOVED***ertFn);
};

helpers.testLevels = function (levels, transport, ***REMOVED***ertMsg, ***REMOVED***ertFn) {
  var tests = {};
  
  Object.keys(levels).forEach(function (level) {
    var test = {
      topic: function () {
        transport.log(level, 'test message', {}, this.callback.bind(this, null));
      }
    };
   
    test[***REMOVED***ertMsg] = ***REMOVED***ertFn;
    tests['with the ' + level + ' level'] = test;
  });
  
  var metadatatest = {
    topic: function () {
      transport.log('info', 'test message', { metadata: true }, this.callback.bind(this, null));
    }
  };
  
  metadatatest[***REMOVED***ertMsg] = ***REMOVED***ertFn;
  tests['when p***REMOVED***ed metadata'] = metadatatest;

  var primmetadatatest = {
    topic: function () {
      transport.log('info', 'test message', 'metadata', this.callback.bind(this, null));
    }
  };

  primmetadatatest[***REMOVED***ertMsg] = ***REMOVED***ertFn;
  tests['when p***REMOVED***ed primitive metadata'] = primmetadatatest;

  var circmetadata = { }; 
  circmetadata['metadata'] = circmetadata;

  var circmetadatatest = {
    topic: function () {
      transport.log('info', 'test message', circmetadata, this.callback.bind(this, null));
    }
  };

  circmetadatatest[***REMOVED***ertMsg] = ***REMOVED***ertFn;
  tests['when p***REMOVED***ed circular metadata'] = circmetadatatest;

  return tests;
};
