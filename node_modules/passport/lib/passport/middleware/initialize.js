/**
 * Module dependencies.
 */
var util = require('util');


/**
 * P***REMOVED***port initialization.
 *
 * Intializes P***REMOVED***port for incoming requests, allowing authentication strategies
 * to be applied.
 *
 * If sessions are being utilized, applications must set up P***REMOVED***port with
 * functions to serialize a user into and out of a session.  For example, a
 * common pattern is to serialize just the user ID into the session (due to the
 * fact that it is desirable to store the minimum amount of data in a session).
 * When a subsequent request arrives for the session, the full User object can
 * be loaded from the database by ID.
 *
 * Note that additional middleware is required to persist login state, so we
 * must use the `connect.session()` middleware _before_ `p***REMOVED***port.initialize()`.
 *
 * This middleware must be in use by the Connect/Express application for
 * P***REMOVED***port to operate.
 *
 * Examples:
 *
 *     app.configure(function() {
 *       app.use(connect.cookieParser());
 *       app.use(connect.session({ ***REMOVED***: 'keyboard cat' }));
 *       app.use(p***REMOVED***port.initialize());
 *       app.use(p***REMOVED***port.session());
 *     });
 *
 *     p***REMOVED***port.serializeUser(function(user, done) {
 *       done(null, user.id);
 *     });
 *
 *     p***REMOVED***port.deserializeUser(function(id, done) {
 *       User.findById(id, function (err, user) {
 *         done(err, user);
 *       });
 *     });
 *
 * @return {Function}
 * @api public
 */
module.exports = function initialize() {
  
  return function initialize(req, res, next) {
    var p***REMOVED***port = this;
    req._p***REMOVED***port = {};
    req._p***REMOVED***port.instance = p***REMOVED***port;

    //console.log('!! session: ' + util.inspect(req.session));
    
    if (req.session && req.session[p***REMOVED***port._key]) {
      // load data from existing session
      req._p***REMOVED***port.session = req.session[p***REMOVED***port._key];
    } else if (req.session) {
      // initialize new session
      req.session[p***REMOVED***port._key] = {};
      req._p***REMOVED***port.session = req.session[p***REMOVED***port._key];
    } else {
      // no session is available
      req._p***REMOVED***port.session = {};
    }
    
    next();
  }
}
